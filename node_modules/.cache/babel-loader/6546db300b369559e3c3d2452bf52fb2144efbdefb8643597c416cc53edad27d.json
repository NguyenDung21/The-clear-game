{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[inputPoints,setInputPoints]=useState('');const[numbers,setNumbers]=useState([]);const[positions,setPositions]=useState([]);const[clickedNumbers,setClickedNumbers]=useState([]);const[time,setTime]=useState(0);const[isGameOver,setIsGameOver]=useState(false);const[isAllCleared,setIsAllCleared]=useState(false);const[intervalId,setIntervalId]=useState(null);useEffect(()=>{if(numbers.length>0&&clickedNumbers.length===numbers.length){setIsAllCleared(true);clearInterval(intervalId);}},[clickedNumbers,numbers,intervalId]);const startTimer=()=>{// If there is already a timer running, don't start a new one\nif(intervalId)return;const id=setInterval(()=>{setTime(prevTime=>prevTime+10);},10);// 10 ms for hundredth of a second\nsetIntervalId(id);};const handleRestart=()=>{clearInterval(intervalId);setIntervalId(null);setInputPoints('');setNumbers([]);setPositions([]);setClickedNumbers([]);setTime(0);setIsGameOver(false);setIsAllCleared(false);};const generateNumbers=()=>{const count=parseInt(inputPoints,10);if(isNaN(count)||count<=0){alert('Please enter a valid number!');return;}const generatedNumbers=Array.from({length:count},(_,i)=>i+1);setNumbers(generatedNumbers);setPositions(generateRandomPositions(count));setClickedNumbers([]);setIsGameOver(false);setIsAllCleared(false);setTime(0);startTimer();// Start the timer when numbers are generated\n};const generateRandomPositions=count=>{const positions=[];for(let i=0;i<count;i++){const x=Math.random()*(800-50);// 50 is the diameter of each number button\nconst y=Math.random()*(800-50);// 50 is the diameter of each number button\npositions.push({x,y});}return positions;};const handleNumberClick=number=>{const currentIndex=clickedNumbers.length;const nextCorrectNumber=currentIndex+1;if(number!==nextCorrectNumber){setIsGameOver(true);clearInterval(intervalId);return;}setClickedNumbers([...clickedNumbers,number]);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"LET'S PLAY\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"POINT: \"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputPoints,onChange:e=>setInputPoints(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{onClick:generateNumbers,children:\"Generate\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Time: \"}),/*#__PURE__*/_jsxs(\"span\",{children:[(time/1000).toFixed(2),\" seconds\"]})]}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:handleRestart,children:\"Restart\"})}),isGameOver&&/*#__PURE__*/_jsx(\"div\",{className:\"message\",children:\"Game Over!\"}),isAllCleared&&/*#__PURE__*/_jsx(\"div\",{className:\"message\",children:\"ALL CLEARED!\"}),/*#__PURE__*/_jsx(\"div\",{className:\"number-container\",children:numbers.map((number,index)=>/*#__PURE__*/_jsx(\"button\",{className:`number-button ${clickedNumbers.includes(number)?'clicked':''}`,onClick:()=>handleNumberClick(number),disabled:isGameOver,style:{top:`${positions[index].y}px`,left:`${positions[index].x}px`},children:number},number))})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","App","inputPoints","setInputPoints","numbers","setNumbers","positions","setPositions","clickedNumbers","setClickedNumbers","time","setTime","isGameOver","setIsGameOver","isAllCleared","setIsAllCleared","intervalId","setIntervalId","length","clearInterval","startTimer","id","setInterval","prevTime","handleRestart","generateNumbers","count","parseInt","isNaN","alert","generatedNumbers","Array","from","_","i","generateRandomPositions","x","Math","random","y","push","handleNumberClick","number","currentIndex","nextCorrectNumber","className","children","type","value","onChange","e","target","onClick","toFixed","map","index","includes","disabled","style","top","left"],"sources":["/Users/nguyendung/Desktop/PracticeReact/practice/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [inputPoints, setInputPoints] = useState('');\n  const [numbers, setNumbers] = useState([]);\n  const [positions, setPositions] = useState([]);\n  const [clickedNumbers, setClickedNumbers] = useState([]);\n  const [time, setTime] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isAllCleared, setIsAllCleared] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n\n  useEffect(() => {\n    if (numbers.length > 0 && clickedNumbers.length === numbers.length) {\n      setIsAllCleared(true);\n      clearInterval(intervalId);\n    }\n  }, [clickedNumbers, numbers, intervalId]);\n\n  const startTimer = () => {\n    // If there is already a timer running, don't start a new one\n    if (intervalId) return;\n\n    const id = setInterval(() => {\n      setTime((prevTime) => prevTime + 10);\n    }, 10); // 10 ms for hundredth of a second\n    setIntervalId(id);\n  };\n\n  const handleRestart = () => {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setInputPoints('');\n    setNumbers([]);\n    setPositions([]);\n    setClickedNumbers([]);\n    setTime(0);\n    setIsGameOver(false);\n    setIsAllCleared(false);\n  };\n\n  const generateNumbers = () => {\n    const count = parseInt(inputPoints, 10);\n    if (isNaN(count) || count <= 0) {\n      alert('Please enter a valid number!');\n      return;\n    }\n    const generatedNumbers = Array.from({ length: count }, (_, i) => i + 1);\n    setNumbers(generatedNumbers);\n    setPositions(generateRandomPositions(count));\n    setClickedNumbers([]);\n    setIsGameOver(false);\n    setIsAllCleared(false);\n    setTime(0);\n    startTimer(); // Start the timer when numbers are generated\n  };\n\n  const generateRandomPositions = (count) => {\n    const positions = [];\n    for (let i = 0; i < count; i++) {\n      const x = Math.random() * (800 - 50); // 50 is the diameter of each number button\n      const y = Math.random() * (800 - 50); // 50 is the diameter of each number button\n      positions.push({ x, y });\n    }\n    return positions;\n  };\n\n  const handleNumberClick = (number) => {\n    const currentIndex = clickedNumbers.length;\n    const nextCorrectNumber = currentIndex + 1;\n\n    if (number !== nextCorrectNumber) {\n      setIsGameOver(true);\n      clearInterval(intervalId);\n      return;\n    }\n\n    setClickedNumbers([...clickedNumbers, number]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>LET'S PLAY</h1>\n      <div>\n        <label>POINT: </label>\n        <input\n          type=\"text\"\n          value={inputPoints}\n          onChange={(e) => setInputPoints(e.target.value)}\n        />\n        <button onClick={generateNumbers}>Generate</button>\n      </div>\n      <div>\n        <label>Time: </label>\n        <span>{(time / 1000).toFixed(2)} seconds</span>\n      </div>\n      <div>\n        <button onClick={handleRestart}>Restart</button>\n      </div>\n      {isGameOver && <div className=\"message\">Game Over!</div>}\n      {isAllCleared && <div className=\"message\">ALL CLEARED!</div>}\n      <div className=\"number-container\">\n        {numbers.map((number, index) => (\n          <button\n            key={number}\n            className={`number-button ${clickedNumbers.includes(number) ? 'clicked' : ''}`}\n            onClick={() => handleNumberClick(number)}\n            disabled={isGameOver}\n            style={{\n              top: `${positions[index].y}px`,\n              left: `${positions[index].x}px`,\n            }}\n          >\n            {number}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}