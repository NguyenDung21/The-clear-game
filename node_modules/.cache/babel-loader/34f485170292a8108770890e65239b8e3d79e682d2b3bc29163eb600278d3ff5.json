{"ast":null,"code":"var _jsxFileName = \"/Users/nguyendung/Desktop/PracticeReact/practice/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputPoints, setInputPoints] = useState('');\n  const [numbers, setNumbers] = useState([]);\n  const [positions, setPositions] = useState([]);\n  const [clickedNumbers, setClickedNumbers] = useState([]);\n  const [time, setTime] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isAllCleared, setIsAllCleared] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  useEffect(() => {\n    if (numbers.length > 0 && clickedNumbers.length === numbers.length) {\n      setIsAllCleared(true);\n      clearInterval(intervalId);\n    }\n  }, [clickedNumbers, numbers, intervalId]);\n  const startTimer = () => {\n    // If there is already a timer running, don't start a new one\n    if (intervalId) return;\n    const id = setInterval(() => {\n      setTime(prevTime => prevTime + 10);\n    }, 10); // 10 ms for hundredth of a second\n    setIntervalId(id);\n  };\n  const handleRestart = () => {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setInputPoints('');\n    setNumbers([]);\n    setPositions([]);\n    setClickedNumbers([]);\n    setTime(0);\n    setIsGameOver(false);\n    setIsAllCleared(false);\n  };\n  const generateNumbers = () => {\n    const count = parseInt(inputPoints, 10);\n    if (isNaN(count) || count <= 0) {\n      alert('Please enter a valid number!');\n      return;\n    }\n    const generatedNumbers = Array.from({\n      length: count\n    }, (_, i) => i + 1);\n    setNumbers(generatedNumbers);\n    setPositions(generateRandomPositions(count));\n    setClickedNumbers([]);\n    setIsGameOver(false);\n    setIsAllCleared(false);\n    setTime(0);\n    startTimer(); // Start the timer when numbers are generated\n  };\n  const generateRandomPositions = count => {\n    const positions = [];\n    for (let i = 0; i < count; i++) {\n      const x = Math.random() * (800 - 50); // 50 is the diameter of each number button\n      const y = Math.random() * (800 - 50); // 50 is the diameter of each number button\n      positions.push({\n        x,\n        y\n      });\n    }\n    return positions;\n  };\n  const handleNumberClick = number => {\n    const currentIndex = clickedNumbers.length;\n    const nextCorrectNumber = currentIndex + 1;\n    if (number !== nextCorrectNumber) {\n      setIsGameOver(true);\n      clearInterval(intervalId);\n      return;\n    }\n    setClickedNumbers([...clickedNumbers, number]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"LET'S PLAY\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"POINT: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputPoints,\n        onChange: e => setInputPoints(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: generateNumbers,\n        children: \"Generate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Time: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [(time / 1000).toFixed(2), \" seconds\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: \"Game Over!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 22\n    }, this), isAllCleared && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message\",\n      children: \"ALL CLEARED!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"number-container\",\n      children: numbers.map((number, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `number-button ${clickedNumbers.includes(number) ? 'clicked' : ''}`,\n        onClick: () => handleNumberClick(number),\n        disabled: isGameOver,\n        style: {\n          top: `${positions[index].y}px`,\n          left: `${positions[index].x}px`\n        },\n        children: number\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"azkJWIn3ei+a7J6QgRZQ4CcPdn0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","App","_s","inputPoints","setInputPoints","numbers","setNumbers","positions","setPositions","clickedNumbers","setClickedNumbers","time","setTime","isGameOver","setIsGameOver","isAllCleared","setIsAllCleared","intervalId","setIntervalId","length","clearInterval","startTimer","id","setInterval","prevTime","handleRestart","generateNumbers","count","parseInt","isNaN","alert","generatedNumbers","Array","from","_","i","generateRandomPositions","x","Math","random","y","push","handleNumberClick","number","currentIndex","nextCorrectNumber","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onClick","toFixed","map","index","includes","disabled","style","top","left","_c","$RefreshReg$"],"sources":["/Users/nguyendung/Desktop/PracticeReact/practice/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [inputPoints, setInputPoints] = useState('');\n  const [numbers, setNumbers] = useState([]);\n  const [positions, setPositions] = useState([]);\n  const [clickedNumbers, setClickedNumbers] = useState([]);\n  const [time, setTime] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isAllCleared, setIsAllCleared] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n\n  useEffect(() => {\n    if (numbers.length > 0 && clickedNumbers.length === numbers.length) {\n      setIsAllCleared(true);\n      clearInterval(intervalId);\n    }\n  }, [clickedNumbers, numbers, intervalId]);\n\n  const startTimer = () => {\n    // If there is already a timer running, don't start a new one\n    if (intervalId) return;\n\n    const id = setInterval(() => {\n      setTime((prevTime) => prevTime + 10);\n    }, 10); // 10 ms for hundredth of a second\n    setIntervalId(id);\n  };\n\n  const handleRestart = () => {\n    clearInterval(intervalId);\n    setIntervalId(null);\n    setInputPoints('');\n    setNumbers([]);\n    setPositions([]);\n    setClickedNumbers([]);\n    setTime(0);\n    setIsGameOver(false);\n    setIsAllCleared(false);\n  };\n\n  const generateNumbers = () => {\n    const count = parseInt(inputPoints, 10);\n    if (isNaN(count) || count <= 0) {\n      alert('Please enter a valid number!');\n      return;\n    }\n    const generatedNumbers = Array.from({ length: count }, (_, i) => i + 1);\n    setNumbers(generatedNumbers);\n    setPositions(generateRandomPositions(count));\n    setClickedNumbers([]);\n    setIsGameOver(false);\n    setIsAllCleared(false);\n    setTime(0);\n    startTimer(); // Start the timer when numbers are generated\n  };\n\n  const generateRandomPositions = (count) => {\n    const positions = [];\n    for (let i = 0; i < count; i++) {\n      const x = Math.random() * (800 - 50); // 50 is the diameter of each number button\n      const y = Math.random() * (800 - 50); // 50 is the diameter of each number button\n      positions.push({ x, y });\n    }\n    return positions;\n  };\n\n  const handleNumberClick = (number) => {\n    const currentIndex = clickedNumbers.length;\n    const nextCorrectNumber = currentIndex + 1;\n\n    if (number !== nextCorrectNumber) {\n      setIsGameOver(true);\n      clearInterval(intervalId);\n      return;\n    }\n\n    setClickedNumbers([...clickedNumbers, number]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>LET'S PLAY</h1>\n      <div>\n        <label>POINT: </label>\n        <input\n          type=\"text\"\n          value={inputPoints}\n          onChange={(e) => setInputPoints(e.target.value)}\n        />\n        <button onClick={generateNumbers}>Generate</button>\n      </div>\n      <div>\n        <label>Time: </label>\n        <span>{(time / 1000).toFixed(2)} seconds</span>\n      </div>\n      <div>\n        <button onClick={handleRestart}>Restart</button>\n      </div>\n      {isGameOver && <div className=\"message\">Game Over!</div>}\n      {isAllCleared && <div className=\"message\">ALL CLEARED!</div>}\n      <div className=\"number-container\">\n        {numbers.map((number, index) => (\n          <button\n            key={number}\n            className={`number-button ${clickedNumbers.includes(number) ? 'clicked' : ''}`}\n            onClick={() => handleNumberClick(number)}\n            disabled={isGameOver}\n            style={{\n              top: `${positions[index].y}px`,\n              left: `${positions[index].x}px`,\n            }}\n          >\n            {number}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}